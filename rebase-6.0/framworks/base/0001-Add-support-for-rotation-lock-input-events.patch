From 49fbe9f9fed0990f39dc017fcd3f9100759e3a15 Mon Sep 17 00:00:00 2001
From: Ziyan <jaraidaniel@gmail.com>
Date: Fri, 3 Feb 2017 20:39:49 +0100
Subject: [PATCH 1/2] Add support for rotation lock input events

(cherry picked from commit 6cbc30218daa20713c771533d7cf043379556c9a)

 Conflicts:
	core/java/android/view/WindowManagerPolicy.java
	policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
	services/java/com/android/server/input/InputManagerService.java
	services/java/com/android/server/wm/InputMonitor.java

Change-Id: I7c4901c1918eca88d7da83b4aabdbcc175b3afca
---
 core/java/android/view/WindowManagerPolicy.java              |  7 +++++++
 .../java/com/android/server/input/InputManagerService.java   | 11 +++++++++++
 .../java/com/android/server/policy/PhoneWindowManager.java   | 12 ++++++++++++
 services/core/java/com/android/server/wm/InputMonitor.java   |  6 ++++++
 4 files changed, 36 insertions(+)

diff --git a/core/java/android/view/WindowManagerPolicy.java b/core/java/android/view/WindowManagerPolicy.java
index aaf6052..0e3ee6a 100644
--- a/core/java/android/view/WindowManagerPolicy.java
+++ b/core/java/android/view/WindowManagerPolicy.java
@@ -1029,6 +1029,13 @@ public interface WindowManagerPolicy {
     public void notifyCameraLensCoverSwitchChanged(long whenNanos, boolean lensCovered);
 
     /**
+     * Tell the policy that the rotation lock switch has changed state.
+     * @param whenNanos The time when the change occurred in uptime nanoseconds.
+     * @param isLocked True if the rotation is now locked.
+     */
+    public void notifyRotateLockSwitchChanged(long whenNanos, boolean isLocked);
+
+    /**
      * Tell the policy if anyone is requesting that keyguard not come on.
      *
      * @param enabled Whether keyguard can be on or not.  does not actually
diff --git a/services/core/java/com/android/server/input/InputManagerService.java b/services/core/java/com/android/server/input/InputManagerService.java
index 0205a20..765d070 100644
--- a/services/core/java/com/android/server/input/InputManagerService.java
+++ b/services/core/java/com/android/server/input/InputManagerService.java
@@ -261,6 +261,9 @@ public class InputManagerService extends IInputManager.Stub
     /** Switch code: Camera lens cover. When set the lens is covered. */
     public static final int SW_CAMERA_LENS_COVER = 0x09;
 
+    /** Switch code: Rotation Lock.  When set, rotation is locked. */
+    public static final int SW_ROTATE_LOCK = 0x0c;
+
     public static final int SW_LID_BIT = 1 << SW_LID;
     public static final int SW_TABLET_MODE_BIT = 1 << SW_TABLET_MODE;
     public static final int SW_KEYPAD_SLIDE_BIT = 1 << SW_KEYPAD_SLIDE;
@@ -271,6 +274,7 @@ public class InputManagerService extends IInputManager.Stub
     public static final int SW_JACK_BITS =
             SW_HEADPHONE_INSERT_BIT | SW_MICROPHONE_INSERT_BIT | SW_JACK_PHYSICAL_INSERT_BIT | SW_LINEOUT_INSERT_BIT;
     public static final int SW_CAMERA_LENS_COVER_BIT = 1 << SW_CAMERA_LENS_COVER;
+    public static final int SW_ROTATE_LOCK_BIT = 1 << SW_ROTATE_LOCK;
 
     /** Whether to use the dev/input/event or uevent subsystem for the audio jack. */
     final boolean mUseDevInputEventForAudioJack;
@@ -1497,6 +1501,11 @@ public class InputManagerService extends IInputManager.Stub
                     switchMask);
         }
 
+        if ((switchMask & SW_ROTATE_LOCK_BIT) != 0) {
+            final boolean isLocked = ((switchValues & SW_ROTATE_LOCK_BIT) != 0);
+            mWindowManagerCallbacks.notifyRotateLockSwitchChanged(whenNanos, isLocked);
+        }
+
         if ((switchMask & SW_TABLET_MODE_BIT) != 0) {
             SomeArgs args = SomeArgs.obtain();
             args.argi1 = (int) (whenNanos & 0xFFFFFFFF);
@@ -1698,6 +1707,8 @@ public class InputManagerService extends IInputManager.Stub
 
         public void notifyCameraLensCoverSwitchChanged(long whenNanos, boolean lensCovered);
 
+        public void notifyRotateLockSwitchChanged(long whenNanos, boolean isLocked);
+
         public void notifyInputChannelBroken(InputWindowHandle inputWindowHandle);
 
         public long notifyANR(InputApplicationHandle inputApplicationHandle,
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 0d96ca6..0dd08c2 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -4768,6 +4768,18 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mCameraLensCoverState = lensCoverState;
     }
 
+    /** {@inheritDoc} */
+    public void notifyRotateLockSwitchChanged(long whenNanos, boolean isLocked) {
+        try {
+            if (isLocked)
+                mWindowManager.freezeRotation(-1);
+            else
+                mWindowManager.thawRotation();
+        } catch (RemoteException e) {
+            // Ignore
+        }
+    }
+
     void setHdmiPlugged(boolean plugged) {
         if (mHdmiPlugged != plugged) {
             mHdmiPlugged = plugged;
diff --git a/services/core/java/com/android/server/wm/InputMonitor.java b/services/core/java/com/android/server/wm/InputMonitor.java
index ae442e5..46a6b56 100644
--- a/services/core/java/com/android/server/wm/InputMonitor.java
+++ b/services/core/java/com/android/server/wm/InputMonitor.java
@@ -350,6 +350,12 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
         mService.mPolicy.notifyCameraLensCoverSwitchChanged(whenNanos, lensCovered);
     }
 
+    /* Notifies that the rotation lock switch changed state. */
+    @Override
+    public void notifyRotateLockSwitchChanged(long whenNanos, boolean isLocked) {
+        mService.mPolicy.notifyRotateLockSwitchChanged(whenNanos, isLocked);
+    }
+
     /* Provides an opportunity for the window manager policy to intercept early key
      * processing as soon as the key has been read from the device. */
     @Override
-- 
2.7.4

